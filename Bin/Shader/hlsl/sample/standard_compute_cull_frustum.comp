/****************************************************************************
* LostPeterVulkan - Copyright (C) 2022 by LostPeter
* 
* Author:   LostPeter
* Time:     2024-09-07
* Github:   https://github.com/LostPeter/LostPeterVulkan
* Document: https://www.zhihu.com/people/lostpeter/posts
*
* This code is licensed under the MIT license (MIT) (http://opensource.org/licenses/MIT)
****************************************************************************/

#include "../hlsl_common.hlsl"
#include "../hlsl_cull.hlsl"


[[vk::binding(0)]] cbuffer cullConsts                           				: register(b0)
{
    CullConstants cullConsts;
}

[[vk::binding(1)]] RWStructuredBuffer<CullObjectConstants> cullObjectConstsCB 	: register(u0);
[[vk::binding(2)]] RWStructuredBuffer<uint> argsCB              				: register(u1);
[[vk::binding(3)]] RWStructuredBuffer<float> lodCB								: register(u2);
[[vk::binding(4)]] RWStructuredBuffer<uint> resultCB							: register(u3);


[numthreads(64, 1, 1)]
void main(uint id : SV_DispatchThreadID)
{
	if (id >= cullConsts.nMaxObjectCount)
        return;
		
    CullObjectConstants currentObject = cullObjectConstsCB[id];
    float disCamera = distance(cullConsts.v4ParamComon[0].xyz, currentObject.vPos.xyz);
	
    for (uint i = 0; i < cullConsts.nMaxLodCount; i++)
    {
        uint index = i;
        uint indexBaseLod = index * cullConsts.nMaxRenderCount * 2;
        float lodDisMin = lodCB[indexBaseLod + currentObject.nRenderIndex * 2 + 0];
        float lodDisMax = lodCB[indexBaseLod + currentObject.nRenderIndex * 2 + 1];

        if (cullConsts.nIsNoCulling > 0 ||
            (disCamera >= lodDisMin && 
			disCamera < lodDisMax && 
			!Cull_Frustum(cullConsts.v4FrustumPlanes,
						  cullConsts.v4ParamComon,
						  currentObject.vPos.xyz, 
						  currentObject.vExt.xyz)))
        {
            uint indexBaseResult = index * cullConsts.nMaxObjectCount;
            uint indexBaseRender = index * cullConsts.nMaxRenderCount * 5;

            uint currentIndex = 0;
            for (uint j = 0; j < currentObject.nRenderCount; j++)
            {
                InterlockedAdd(argsCB[indexBaseRender + (currentObject.nRenderIndex + j) * 5 + 1], 1, currentIndex);
            }
            resultCB[indexBaseResult + currentObject.nObjectOffset + currentIndex] = id - currentObject.nObjectOffset;

            break;
        }
    }
}